1. Warmup-2 > string_times

Question:
Given a string and a non-negative int n, return a larger string that is n copies of the original string.

Check for these cases:
string_times('Hi', 2) → 'HiHi'
string_times('Hi', 3) → 'HiHiHi'
string_times('Hi', 1) → 'Hi'

Solution: 
def string_times(str, n):
    if(n>0):
        print(n * str)
    else:
        return -1

string_times('Hi', 2) #→ 'HiHi'
string_times('Hi', 3) #→ 'HiHiHi'
string_times('Hi', 1) #→ 'Hi'
#----------------------------------------#

#----------------------------------------#
2. Warmup-2 > front_times 

Question:
Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front;

Check for these cases:
front_times('Chocolate', 2) → 'ChoCho'
front_times('Chocolate', 3) → 'ChoChoCho'
front_times('Abc', 3) → 'AbcAbcAbc'

Solution: 
def front_times(str, n):
    if(n>0 and str != ""):
        front = str[0:3]
        print(n * front)
    else:
        return -1

front_times('Chocolate', 2) #→ 'ChoCho'
front_times('Chocolate', 3) #→ 'ChoChoCho'
front_times('Abc', 3) #→ 'AbcAbcAbc'
#----------------------------------------#

#----------------------------------------#
3. Warmup-2 > string_bits 

Question:
Given a string, return a new string made of every other char starting with the first, so "Hello" yields "Hlo".

Check for these cases:
string_bits('Hello') → 'Hlo'
string_bits('Hi') → 'H'
string_bits('Heeololeo') → 'Hello'

Solution: 
def string_bits(str):
    nstr = ""
    for i in range(0,len(str),2):   # e.g. len = 5, so, i = 0,2,4
        nstr += str[i]
    print(nstr)

string_bits('Hello') #→ 'Hlo'
string_bits('Hi') #→ 'H'
string_bits('Heeololeo') #→ 'Hello'
#----------------------------------------#

#----------------------------------------#
4. Warmup-2 > string_splosion 

Question:
Given a non-empty string like "Code" return a string like "CCoCodCode".

Check for these cases:
string_splosion('Code') → 'CCoCodCode'
string_splosion('abc') → 'aababc'
string_splosion('ab') → 'aab'

Solution: 
def string_splosion(str):
    nstr = ""
    for i in range(len(str)):
        nstr += str[:i+1]     # gives 'CCoCodCode'
        #nstr += str[0:len(str)-i]  # gives 'CodeCodCoC'
    print(nstr)

string_splosion('Code') #→ 'CCoCodCode'
string_splosion('abc') #→ 'aababc'
string_splosion('ab') #→ 'aab'
#----------------------------------------#

#----------------------------------------#
5. Warmup-2 > 

Question:
Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

Check for these cases:
last2('hixxhi') → 1
last2('xaxxaxaxx') → 1
last2('axxxaaxx') → 2

Solution: 

#----------------------------------------#

#----------------------------------------#
6. Warmup-2 > array_count9 

Question:
Given an array of ints, return the number of 9's in the array.

Check for these cases:
array_count9([1, 2, 9]) → 1
array_count9([1, 9, 9]) → 2
array_count9([1, 9, 9, 3, 9]) → 3

Solution: 
def array_count9(nums):
    count = 0
    for num in nums:
        if(num == 9):
            count = count + 1
    print(count)
    
array_count9([1, 2, 9]) #→ 1
array_count9([1, 9, 9]) #→ 2
array_count9([1, 9, 9, 3, 9]) #→ 3
#----------------------------------------#

#----------------------------------------#

1. Logic-1 > double_char  

Question:
Given a string, return a string where for every char in the original, there are two chars.

Check for these cases:
double_char('The') → 'TThhee'
double_char('AAbb') → 'AAAAbbbb'
double_char('Hi-There') → 'HHii--TThheerree'

Solution: 
#----------------------------------------#

#----------------------------------------#
2. Logic-1 > count_hi   

Question:
Return the number of times that the string "hi" appears anywhere in the given string.

Check for these cases:
count_hi('abc hi ho') → 1
count_hi('ABChi hi') → 2
count_hi('hihi') → 2

Solution: 
#----------------------------------------#

#----------------------------------------#
3. Logic-1 > cat_dog   

Question:
Return True if the string "cat" and "dog" appear the same number of times in the given string.

Check for these cases:
cat_dog('catdog') → True
cat_dog('catcat') → False
cat_dog('1cat1cadodog') → True

Solution: 
#----------------------------------------#

#----------------------------------------#
4. Logic-1 > count_code   

Question:
Return the number of times that the string "code" appears anywhere in the given string, except we'll accept any letter for the 'd', so "cope" and "cooe" count.

Check for these cases:
count_code('aaacodebbb') → 1
count_code('codexxcode') → 2
count_code('cozexxcope') → 2

Solution: 
#----------------------------------------#

#----------------------------------------#
5. Logic-1 > end_other   

Question:

Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). Note: s.lower() returns the lowercase version of a string.

Check for these cases:
end_other('Hiabc', 'abc') → True
end_other('AbC', 'HiaBc') → True
end_other('abc', 'abXabc') → True

Solution: 
#----------------------------------------#

#----------------------------------------#
6. Logic-1 > xyz_there   

Question:
Return True if the given string contains an appearance of "xyz" where the xyz is not directly preceeded by a period (.). So "xxyz" counts but "x.xyz" does not.

Check for these cases:
xyz_there('abcxyz') → True
xyz_there('abc.xyz') → False
xyz_there('xyz.abc') → True

Solution: 
#----------------------------------------#

#----------------------------------------#
